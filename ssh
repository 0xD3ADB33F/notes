Web-based command line
	http://code.google.com/p/shellinabox/

command {{{1

ssh user@host [-p port] -L<port#>:localhost:<port#>

Options
	p	change passphrase
	f	run command without shell
	D	dynamic, app-level port forwarding
		used now for Socks4 server
			ssh -D 1080 my.box.com
	L	forward ports
		e.g. SMTP & POP3
		set AllowTcpForwarding 'yes' in sshd_config
			ssh -N -L <local port #>:localhost:<remote port #> username@remote-server
	N	no command - good for port forwarding 
	X	forward local connection to X display server to remote session
		DISPLAY variable set by ssh will point to server machine and with a
		number greater than 0 to refer to a 'Proxy' server created on remote
		side.		
		AllowXForwarding must be 'yes' in remote sshd_config
	a	forward local connection to authentication agent to remote

Change passphrase
	ssh-keygen -t <type> -p

Display fingerprint
	ssh-kehgen -f <pub key file name> -l

escapes {{{1

Default escape key is ~
Config option is EscapeChar (could change to %)
Terminate connection	.
Suspend connection		^Z
Port forward term		C
List forwarded			#
Override escape			~ (i.e. ~~)


config file {{{1

Port Forwarding:
LocalForward 2001 localhost:143


Docs {{{1

Run remote Python script.  Note strong quotes to protect $HOME.
	ssh vex.net 'env PYTHONPATH=$HOME/lib/python python -c "import mytest"'

File Transfer (w/o scp)
ssh uid@remotehost 'cat > /path/to/dest' < /path/to/source
cat .ssh/id_dsa.pub | ssh user1@remote \
	 "cat - >>.ssh/authorized_keys"

Login/Password config {{{1

Disable password login:
	sshd_config: PasswordAuthentication no
	/etc/pam.d/ssh: disable unix passwords

Disable root login except for restrictions
    sshd_config: PermitRootLogin forced-commands-only
    authorized_keys: command="rdiff-backup --server --restrict-read-only /",from="workstation",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty <rest of public key>
    If other use attempted, login fails with passphrase & password prompts

utils {{{1

ssh-agent
	run: eval `ssh-agent`
	kill and unset env vars: eval `ssh-agent -k`

ssh-add
	run: ssh-add <key>
	if no arg to ssh-add, adds default keys
	l	list fingerprints of added identitites
	L	list full public keys of added identitites
	D	delete all identities

related programs  {{{1 

scp
	wildcards for remote path: may need to quote or escape
	-p	preserve permissions and timestamps
	do not use to copy trees as links copied as target files
	instead:
		tar cf - /usr/local/bin | ssh server.example.com tar xf -

sftp
	login to remote host
		sftp -oPort=2222 localhost 
	
sshfs
	mount
sudo sshfs {{user id}}@{{server}}:{{remote share}} {{local mount point}} \
-o idmap=user -o allow_other -o uid={{local user id}} -o gid={{local group id}}

fstab entry:
sshfs#btd: /home/andmalc/mnt/btd fuse uid=1000,gid=1000,user 0 0

rssh
	scp/sftp only access
secvpn
	ssh-based VPN as discussed in Linux VPN HOWTO
corkscrew
	ssh through HTTP proxy
'connect' program to bypass proxy

techniques {{{1

bypass fw by running on SSL handshake port 443


