style sheet with parameters
	
In this tip, I take a single style sheet and repurpose it to provide
different results depending on the parameter values entered by the user
when the document is actually transformed. The style sheet takes an XML
document and transforms it into an HTML document displaying the results 
of a dog show. The basic style sheet creates a page with information in
tables:

Listing 1. The basic style sheet
	<?xml version="1.0"?>
	<xsl:stylesheet
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		version="1.0">

	<xsl:template match="/">
	  <xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="results">
	<html>
	<head>
	<title><xsl:value-of select="@showName" /></title>
	<style>
		* { font-family: Verdana }
		td { font-size: 10pt }
		.groupName { font-weight: bold; }
	</style>
	</head>
	<body>
	  <h2 align="center">
		<xsl:value-of select="@showName" />
	  </h2>
	  <h4 align="center">
		  Show Date: <xsl:value-of select="@showDate" />
	  </h4>
	  <h4 align="center">
		<xsl:value-of select="@location" />
	  </h4>
	  <xsl:apply-templates/>
	</body>
	</html>
	</xsl:template>

	<xsl:template match="group">

	<p class="groupName"><xsl:value-of select="@name"/></p>

	<table align="center" width="75%">
	<tr><td width="10%">
		1st:</td><xsl:apply-templates select="first"/></tr>
	<tr><td width="10%">
		2nd:</td><xsl:apply-templates select="second"/></tr>
	<tr><td width="10%">
		3rd:</td><xsl:apply-templates select="third"/></tr>
	<tr><td width="10%">
		4th:</td><xsl:apply-templates select="fourth"/></tr>
	</table>

	</xsl:template>

	<xsl:template match="first|second|third|fourth">
		<td width="40%"><xsl:value-of select="breed"/></td>
		<td width="50%"><xsl:value-of select="dog"/></td>
	</xsl:template>

	<xsl:template match="group[@name='Best In Show']">
		<p align="center">
			<b>Best In Show:</b>
			<xsl:text>  </xsl:text>
			<xsl:value-of select="first/dog" />
			(<xsl:value-of select="first/breed" />)
		</p>
	</xsl:template>
	</xsl:stylesheet>


The result is a Web page like the one shown in Figure 1, "An HTML 
document displaying the results of a dog show":
http://www.ibm.com/developer/library/x-tipxsltrun/index.html#figure1

You can add a parameter to an XSLT style sheet inside or outside a
template. In this case, you're adding a single winnersOnly parameter,
with an initial value of no.

Listing 2. Adding the parameter
	<?xml version="1.0"?>
	<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	version="1.0">

	<xsl:param name="winnersOnly">no</xsl:param>

	<xsl:template match="/">
			<xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="results">
	...
	<h4 align="center"><xsl:value-of select="@location" /></h4>
	<h1>The value of winnersOnly is "<xsl:value-of
	select="$winnersOnly"/>"</h1>

	<xsl:apply-templates/>

	</body>
	</html>
	</xsl:template>


You specify the parameter with an initial value of no, but you can
specify a different value at runtime. Whatever value you choose, it
can be accessed by using the $winnersOnly notation in a value-of 
element just as though it were a typical XPath expression.

Using Xalan, you could run this transformation using the command:

java org.apache.xalan.xslt.Process -in scores.xml -xsl scores.xsl
-out results.html -param winnersOnly yes

The result is that the value gets set and you can output it to the page,
as in Figure 2, "Result output with parameter value of yes":
http://www.ibm.com/developer/library/x-tipxsltrun/index.html#figure2

USING THE xsl:if ELEMENT

Now that you have the parameter, what can you do with it? Besides
outputting it as part of the result document, you can use it to make
choices. For example, you can use a simple if element to specify that
you want specific text output if the winnersOnly parameter is set to
yes.

Listing 3. Using the xsl:if element

	<h4 align="center"><xsl:value-of select="@location" /></h4>
	<xsl:if test="$winnersOnly='yes'">
		<h2 align="center">WINNERS</h2>
	</xsl:if>
	<xsl:apply-templates/>

You're checking to determine whether a particular condition, or test, is
true. It just so happens that the condition depends on the value of the
parameter. If $winnersOnly='yes' is true, then the content will be
evaluated, or in this case, displayed.

USING THE xsl:choose ELEMENT

The if element is handy for simple choices, but there's no else element,
which makes it difficult to use in complex situations. That's not to say,
however, that you can't perform an if-then-else type of test. You simply
have to use the xsl:choose element instead:

Listing 4. Using the xsl:choose element
	<xsl:template match="group">
	<xsl:choose><xsl:when test="$winnersOnly='yes'">
		<p align="center">
			<b><xsl:value-of select="@name"/>:</b>
			<xsl:text>  </text>
			<xsl:value-of select="first/dog" />
			(<xsl:value-of select="first/breed" />)
		</p>
	</xsl:when>
	<xsl:otherwise>
		<p class="groupName"><xsl:value-of select="@name"/></p>
		<table align="center" width="75%">
		<tr><td width="10%">1st:</td><xsl:apply-templates
	select="first"/></tr>
		<tr><td width="10%">2nd:</td><xsl:apply-templates
	select="second"/></tr>
		<tr><td width="10%">3rd:</td><xsl:apply-templates
	select="third"/></tr>
		<tr><td width="10%">4th:</td><xsl:apply-templates
	select="fourth"/></tr>
		</table>
	</xsl:otherwise>
	</xsl:choose>
	</xsl:template>


In this case, if the test evaluates to true, then the when block of
content is evaluated and displayed. If not, the otherwise block comes
into play instead.

This time, if you change the winnersOnly parameter to yes, you can see
the results, as in Figure 3, "Result output with use of choose element":
http://www.ibm.com/developer/library/x-tipxsltrun/index.html#figure3


______________________________________________________________________
SUMMARY

In this tip, you've taken a very basic look at using parameters and
conditional statements in an XSLT style sheet. The advantage of 
parameters is that you can specify them at runtime, but this
capability isn't limited to transformations performed from the
command line. With most engines, you can specify transformations when
performing them programmatically, as well.

======================================================================
LINKS TO OTHER GOOD STUFF

::: IBM developerWorks XML Zone :::
http://www-106.ibm.com/developerworks/xml/?nx-8132

::: Resources related to this tip :::
http://www.ibm.com/developer/library/x-tipxsltrun/index.html#resources

::: Full text of this tip on the Web :::
http://www-106.ibm.com/developerworks/library/x-tipxsltrun/?nx-8132

::: Index of other XML tips :::
http://www-106.ibm.com/developerworks/library/x-tips.html?nx-8132

::: Most recent issue of the IBM developerWorks newsletter:
http://www.ibm.com/developerworks/newsletter/dwte080802.html?nx-8132
======================================================================
ABOUT THIS NEWSLETTER
Created by IBM developerWorks (http://www.ibm.com/developerworks/)
Delivered by Topica (http://www.topica.com/tep/index.html)
======================================================================
Subscribe: http://www-106.ibm.com/developerworks/newsletter/?n-about
Unsubscribe: http://ibm.email-publisher.com/u/?a84vCg.a9xYy9
Get help: mailto:customersupport@ibmdw.email-publisher.com
Send comments:
http://www-105.ibm.com/developerworks/newcontent.nsf/dW_feedback/
IBM's privacy policy: http://www.ibm.com/privacy/
IBM's copyright and trademark information:
http://www.ibm.com/legal/copytrade.phtml

THIS NEWSLETTER IS FOR INFORMATION ONLY. This newsletter should not
be interpreted to be a commitment on the part of IBM, and, after the
publication date, IBM cannot guarantee the accuracy of any information
presented. You may copy and distribute this newsletter, as long as:

1. All text is copied without modification and all pages are included.
2. All copies contain IBM's copyright notice and any other notices
provided therein.
3. This document is not distributed for profit.

