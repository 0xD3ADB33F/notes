Create df's {{{1

{col:val,val, col: val,val}
{col:{index:val,index:val},col:{ ... }}


Selecting columns & rows {{{1

Series:
s['i']		select row by index
s['i1','i2','i3']	select multi rows by index

df[col][rows]  
df[[multi cols]][rows]  
df.ix[index for single row]  


Filtering {{{1

df[['Col','Col][filtering expression]

df[df['Col'] == 'val']  - filter on col=val  
df[df['Col'].isin(['val','val'])]  
df.col.where(df.col == 'x') - inserts NaN for non-matches
df.col.where(df.col == 'x', 'sub') - substitude sub for non-matches 


Mask  
mask = np.logical_and(df.CatA=='a', df.CatB=='e')  
df[mask][:5]  


Functions {{{1


df.apply(func), axis=1) - apply func elementwise, axis=0 (rows) is default


Func to apply rowwise:
def func(e):
	return e['Col'] + e['Col']

Func with extra args, first is element
def func(e,x):
	return e > x
df.apply(func, args=(x,))


Grouping {{{1

grouped = df.groupby('Col', 'Col')
grouped.sum()	- groups on index, sums all cols
grouped['Col'].count()
grouped.count() - applies count to all columns
grouped.aggregate(myfunc)  - any function
grouped.agg([np.mean,len])  






