
Modules in the Standard Library

Internet Services {{{1
Getting Data from URL's {{{2

urllib2

ex.
for line in urllib2.urlopen(url):
   do thing to line


OS - Generic Services {{{1

Files & Paths

Many examples using generators
   http://www.dabeaz.com/generators/

os.walk(top, topdown=True, onerror=None)
   returns tuple dirpath, dirnameS, filenames
   if topdown=1, can modify dirnames in place 

os.path

abspath
   returns full path
   use if script arg is relative

splitext
   split filename into (base,extension)

fnmatch - pattern matching in path names
   http://www.dabeaz.com/generators/genfind.py

Shell & running executables {{{1

Run external programs {{{2

subprocess module (new in 2.4)
   replaces
      os.system os.spawn* os.popen* popen2.*
   using w/o return values
        call(*args, **kwargs)
          e.g.
            from subprocess import call, STDOUT
            call(["command", "arg", "arg"], stdout=open("/dev/null", "w"), stderr=STDOUT) 
   using return values
      old:
         f=os.popen('ls -l')
         filelist=f.readlines()
         result=filelist.close()
            #result returned on file close
            #result is None if no errors 
      new:
         p = subprocess.Popen(["doxygen.exe", r"Doxyfile.cfg"], 
             stdout=subprocess.PIPE, stderr=subprocess.STDOUT) 
         lines = p.stdout.readlines() 


Writing to stdin of an external program using os.popen
   Cookbook Recipie 9.11

Controlling an interactive program like ftp:
   http://pexpect.sourceforge.net/
   

Arguments {{{2

   argparse - preferred
   not in stdlib: Click
   Optparse - new in 2.3,  prefered to getopt


zipfile
	zfile = zipfile.ZipFile("SomeZipFile.zip")

	for name in zfile.namelist():
	    localFile = open(name, "wb")
		localFile.write(zfile.read(name))
        localFile.close()


DateTime
~~~~~~~~~

Basic ::

    today=datetime.date.today()

Generate Days Between ::

        from __future__ import generators

        import mx.DateTime

        def date_span_gen(d1, d2):
            """Return an iterator for the dates between d1 and d2."""
            if d2 <= d1:
                raise RuntimeError("d2 (%s) must be later than d1 (%s)." % (d2, d1))
            diff = d2 - d1
            for d in range(diff.days):
                yield (d1 + mx.DateTime.RelativeDateTime(days=d))

        num_days = 30
        d1 = mx.DateTime.now()
        d2 = d1 + mx.DateTime.RelativeDateTime(days=num_days)

        for d in date_span_gen(d1, d2):
            print d


String Services {{{1

re
   replace
      re.sub(pat,replacement,text)

   return list of all matches
      re.findall(pat,text)

Network {{{1

Scapy http://www.secdev.org/projects/scapy/
   use instead of tcpdum, ethereal etc.
   tutorial using
      http://www.ibm.com/developerworks/aix/library/au-pythocli/

SNMP & Python tutorial
   http://www.ibm.com/developerworks/aix/library/au-netsnmpnipython/

Other
============


# vim:set ai et sts=3 sw=3 tw=80:

