Most network programming uses TCP as underlying protocol

Sockets
	Socket:	programming abstraction similar to a file that allows a program to 
	accept incoming connection, make outgoing connections, and send and 
	receive data.  Before machines can establish a connection, both must 
	create a socket object. Furthermore, the machine receiving the connection 
	must bind its socket object to a port.

	Port: 16 bit number in the range 0-65535 that is managed by the os and used by clients to uniquely identify servers.  Ports 0-1023 are reserved by the system and used by common network protocols.
		SMTP	25, FTP 20 & 21, HTTP 80

	Server actions: Create socket, bind to a port, listen on port, accept any incoming connections, read from the socket upon connection (read request), process the request, and write a response back to the socket.

	Client actions: Create socket, connect to a host:port, write its request, read the response.

	TCP servers, after accepting a request on the server socket, will spawn a new socket for the actual communication.

	TCP vs UDP (datagram) sockets (from 
		http://effbot.org/zone/librarybook-index.htm)
		This far, we've used stream (or TCP) sockets. The time protocol specification also mentions UDP sockets, or datagrams. Stream sockets work pretty much like a phone line; you'll know if someone at the remote end picks up the receiver, and you'll notice when she hangs up. In contrast, sending datagrams is more like shouting into a dark room. There might be someone there, but you won't know unless she replies.


HTTP
	Basic request
		GET /hello.txt HTTP/1.0
		Host: hostname
		User-Agent: name

		[optional request body]

	Basic response
		HTTP/1.0 200 OK
		Content-Type: text/plain
		Content-Length: 7

		Hello

	Only required header is Host.
	Header lines separated by '\r\n'
	Blank line must follow headers for both, even if body is empty

Content MIME types
	Show content MIME type as described by a web server
		curl -v -I (show header only) <URL>

