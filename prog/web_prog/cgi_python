Python-Apache basic setup
-----------------------


Since Python script is like any other CGI script, just rename the file
as '.cgi' and have '#!/usr/.../bin/python' as the first line.  If you
want '.py' to be considered as CGI script by Apache, then put
    AddHandler cgi-script .cgi .py 
in your httpd.conf.

Script permissions: make world readable/executable (i.e. 755)

All you need is the "ExecCGI" option in the appropriate directories, and
a valid #! line as the first in your Python script, that's all.

Debuging
--------
1)  Run script at prompt
2)  Redirect error output to browser window
        import sys
        sys.stderr = sys.stdout





Templating Systems
----------------------------------------------------

> Rather than reinvent loop-syntax &c, I found it simplest to
> embed a for statement in the HTML template, a la:
> 
> +for i in range(len(results)):
>     <TR> <TD><B>@i@</B></TD> <TD>@results[i]@</TD> </TR>
> -
> 
> All the presentation logic goes into the template, all of
> the computation into the Python CGI script, and my little
> yaptu.py (yet another python template utility, of course)
> bridges the gap (with about 50 SLOC's, plus comments,
> docstrings, and test pushing it to a bit over 100 lines).

1) There is an irreducible need to either put Python statements into 
HTML or HTML tidbits into Python. You've chosen the former; my 
preference is for the latter:

localList = []
row = '<TR> <TD><B>%s</B></TD> <TD>%s</TD> </TR>'
for i in range(len(results)):
   localList.append(row % (i, results[i]))
rows = string.join(localList, '')
print myTemplate % {'rows':rows}

Typically what I do is print a crude page with interwoven data, give it 
to an HTML specialist to make it look nice, and then dig out of their 
version a sample row with their contributions ('<td align = center 
height="17" bgcolor="blahblahblah">'), and swap string substitution 
markers back in for the data to get the final version of my variable.









Exception Handling
----------------------------------------------------
When writing CGI's in Python, you don't get any feedback to the html page when they fail. However, exceptions can be redirected to give information, but I didn't know how to get more valueable information without writing a bunch of different try blocks, so I asked Fredrik Lundh for some way to write the same line of exception handling code everywhere, and to produce more complete information: 

...My goal would be to be able to paste in the identical line of code everywhere, without having to edit it for the particular file name and function name. 

Fredrik: Use the traceback module. I usually use something like this: 

import traceback

def foo():
  try:
      print [][0]
  except Exception, v:
      traceback.print_exc()

This prints the entire traceback to sys.stderr. 

You could also create your own traceback utility, and put it in a suitable helper module. 

    import traceback, sys

    def exception():
        try:
            type, value, tb = sys.exc_info()
            info = traceback.extract_tb(tb)
            filename, lineno, function, text = info[-1] # last line only
            print "%s:%d: %s: %s (in %s)" %\
                  (filename, lineno, type.__name__, str(value), function)
        finally:
            type = value = tb = None # clean up

def foo():
  try:
      print [][0]
  except Exception, v:
      exception()

which prints something like: 

test.py:15: IndexError: list index out of range (in bar)
---------------------------------------------------------------

