Invoking a file/module from a mod_python dispatched request:
	host/[dirs for which py handler module specified]/ww context/file name without extention (optional?)


Argument for WebWare:

The components of Webware are modular and optional so you can use as
little or as much as you want.

Writing servlets with Webware.WebKit is about as easy as writing CGIs,
but they perform better and can be expanded upon with other paradigms
like PSP. e.g., if you start with servlets, I think you have more
places that you can easily go/expand to.

You can even install your own custom templating system, which
Pythoneers seem to enjoy creating.

Also, WebKit gives you "simple URLs" with no extension:

  http://host.com/foo/bar

"bar" can be bar.html, bar.py, bar.psp, or bar.X where X is an
extension/plug-in that you created. The key here is that you can switch
implementations of "bar" (say moving from .py to .psp to .X) and your
URLs stay the same. That means less site maintenance for you and
nobody's bookmarks break.

Extensions like .html and .py are for programmers, not users. Therefore
they don't belong in the URL

-------------------------



Request
	Either from URL typed in browser or from web page form submitted.
	Web server detects a cgi script (WebKit.cgi) and invokes it.
	WebKit.cgi collects info about request and submits it to WebKit app server.
	The app server asks Application to dispatch the raw request.
	The application instantiates an HTTPRequest object and asks the appropriate Servlet (as determined by examining the URL) to process it.
	The servlet generates content into a given HTTPResponse object, whose content is then sent back by the app server to WebKit.cgi. 
	WebKit.cgi prints the content which the web server then delivers to the user's web browser. 


Form Processing
	Simple method: Servlet's respondToPost() or Page's writeHTML() is invoked.
	Alternative: Bind button to a servlet method.  Method may then invoke writeHTML().


Classes to Study:
	Page
	HTTPRequest
	HTTPResponse
	Session



The quick version goes like this:

The URL gets mapped to a servlet simply by name. If the URL names a 
directory, then the directory is expected to have some kind of index.* or 
Main.* file. Note that extensions could include .py for servlets, .psp for 
Python Server Pages, .html, etc.

Your servlet is typically a subclass of Page and overrides methods like 
writeHTML(), writeBody(), etc. You have access to:

    self.request()
    self.response()
    self.session()
    self.application()
    self.transaction()

which will be instances of HTTPRequest, HTTPResponse, Session, Application 
and Transaction. The first three are the most commonly used. Check out 
their class summaries and peruse the source for the doc strings.

Ultimately, your servlet will at some point invoke self.write() or 
self.writeln() to generate content. print statements go to the console for 
your debugging pleasure.

Unlike Zope, URL paths don't map to methods. They map to servlets which are 
defined by Python classes.

Instantiation and caching are handled by the app server.
