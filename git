Fugitive
http://flaviusim.com/blog/how-to-do-a-git-merge-with-vim/

Terms {{{1

Repo is set of commits
Commit:
    pointer to a tree obj which is snapshot of all files & dirs
    author & commiter info
    commit message
    except for first 'root' commit, stores zero or more pointers to parent commits

Refs
    Simple - points to commit ID
    Symbolic - points to another ref

Branch
    movable pointer (simple ref) to tip (newest) commit 
    branch moved forward on each commit

HEAD 
    usually symbolic ref - 
    refers to tip of current local branch.  
    Detatched if is simple ref.
    Checking out branch moves this pointer.  

Index 
    includes snapshot of all files, not just staged.
    new blob created for added/modified files 
    is the new commit.


Merge commits  multiple parents


Repos {{{1
Create new repo with remote at BB
	git init <dir>
	git add . 
	git commit -m 'comment'
	git remote add origin ssh://git@bitbucket.org/andmalc/work.git
	git push -u origin --all # pushes up the repo and its refs for the first time
	git mv	

	git commit -a  #all changes in working directory
	git push -u origin master

Remote repos
origin      default name of remote branch
            remote branches locally referred to as origin/branch_name
            Can then c/o with 'co <name>'.  Remote is 'upstream'

remote 
    show origin  
    add         <remote add <name> <url>
    clone		create new local repo, remote tracking branch is auto-created
    fetch		pull remote changes to remote tracking branch
    pull		pull remote changes to remote tracking branch 
                    and start merge = fetch+merge
    push <repo> upload changes to remote.  Default repo is origin
                <local branch name>:<remote name>


Info {{{1

Status 
	-sb				short form
					Red is changed or untracked
                    Green is staged


Diff - shows changes to working tree
	no arg			changes to tracked files not staged
	--cached		changes staged
	--staged		same as --cached
    HEAD            staged vs. current commit

	<branch> <remote name>/<branch>
	-- <file>		working tree vs. commit
	HEAD\^ HEAD		show diffs between last two commits
					prefix noglob in zsh for no ^ escape needed
	difftool			show diff in vim etc.

Log - shows commit history
	-#				number of commits to show
	 -p				show diffs	
	 --grep			matching string
	 --stat			short summary of files and changes
	 --decorate --graph --oneline --all
	 <path>			show commits with this file

ls-files
    Show tracked files in working tree & index.  
    --abbrv --stage     Show index (includes all files)


Add & Commit {{{1


add <path spec>
    -i  interactive

commit -v			show diff in commit message
commit -a			commit all tracked files

Show remote commit
    ls-remote

Reverting / Resetting {{{1

https://www.atlassian.com/git/tutorials/undoing-changes

revert <commit>
    Generate a new commit that undoes changes in <commit>, applies that to the current branch.    
    Preferred over Reset because preserves history

    revert HEAD~1
        new commit undoing changes from last commit


Reset
    Usually used to undo changes in staging and working dir.  Not for shared commits
    Permanent undo - potential to lose work

	reset				Unstages all, no effect on files 
	reset --hard <commit>	unstages, reverts changes in working dir
	reset -- <path>		unstages <path>
	reset -p			unstage interactively
	
	rebase	?	 

Restore one file from earlier commit.  WD is altered.
	checkout <commit ID> <file path>

Branches {{{1

Branch          collection of commits, all points reachable from named commit
Master          default name of first branch
HEAD            Normally symbolic ref to /refs/heads/<branch name>
                This defines which branch is on
                If earlier commit checked out, is hard link to commit ID.
                Then in detached HEAD mode, not on branch


checkout -b <name>	create new branch <name> and switch to it

branch 
    -v  show all branches,  most recent commit
    -r	show remote tracking branches
    -a	show local and remote tracking branches
    -d  delete <branch>
    -rd delete remote <remote>/<branch>
<name>	create new branch but don't switch to it	    	   


Checkout:
    Change the HEAD symref to point to the new  branch 
    Reset the index to match the tip of the new branch 
    Update the working tree to match the index

git symbolic-ref HEAD


Set upstream branch
    push --set-upstream origin gh-pages

show-branch show all changes in branch

Submodules
	Repo independent of parent, harder to merge parent with child.  
	Tracked in .gitmodules file.  Composed from a gitlink tree entry in main repo that points to particular commit 
	Add
		submodule add [--name name] <repo URL> [relative path in parent repo]
		if path given, logical name is tail unless --name specified
		if no local name given, repo cloned into cwd/<final part of repo path>
	Delete
		mv asubmodule asubmodule_tmp
		git submodule deinit asubmodule    
		git rm asubmodule
		# Note: asubmodule (no trailing slash)
		# or, if you want to leave it in your working tree
		git rm --cached asubmodule
		mv asubmodule_tmp asubmodule
		rm -rf .git/modules/asubmodule
		edit .gitmodules - remove section (?)

	Cloning - don't need to be in submodule dir
		submodule init / submodule update
	Updating
		cd into module dir and git fetch / git merge origin/master
	Info
		submodule status
		git status ?


Subtrees
	Reference to another project.  Files not saved in parent repo. Dir is empty until  
	Setup
		remote add -f {remote_name} {repository_url}
		subtree add --prefix={path/to/subdir} {remote} [branch] --squash
	Pull changes
		subtree merge --prefix={-} 
		fetch {remote}
		subtree pull --prefix={path/to/subdir} {remote} [branch] --squash
	Read-tree
		read-tree --prefix=<path from repo root> -u rack_branch




Merging {{{1

Merge conficts
https://rtcamp.com/tutorials/git/git-resolve-merge-conflicts/

	merge --abort	abandon merge - what happens to uncommited changes?
	merge -Xignore-all-space or -Xignore-space-change - ignore ws changes

	checkout --ours <path>		keep whole file in local commit

Buffer names
	show with: ls-files -s
	0	working tree
	1	change
	2	target
	3	merge branch

gitdiff with vim:
    config:
        git config merge.tool vimdiff
        git config merge.conflictstyle diff3
        git config mergetool.prompt false
    commands
        diffget
        diffput
    buffers
        LO  local
        BA  base
        RE  remote
        ME  merged

Fugitive
http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/
http://alblue.bandlem.com/2011/10/git-tip-of-week-index-revisited.html

File management {{{1

Moves files		mv
Remove files
	rm		Deletes file/directory
	rm --cached		Untracks files/directoires

Unstage file
	reset <file>
    git reset HEAD <fn>

Undelete files staged but not commited:
    git checkout -- <fn>

Ignore files
	if already indexed:
		git update-index --assume-unchanged
	add to .gitignore

Forking {{{1

Fork at Github
clone a local copy
add URL of original as remote upstream
update by fetching changes, checking out master then merging upstream/master


Utilities {{{1

vcsh	manage multiple repos
		http://goo.gl/t2xCne
	init
	list
	enter

Setup config on new machine
	sudo apt-get install vcsh git mr
	vcsh enter config
	git remote add origin ssh://git@bitbucket.org/andmalc/config.git
	git pull -u origin master

Git Config {{{1

[user]
   email = andmalc@gmail.com
   name = andmalc
[core]
   pager = less -r
[status]
	showUntrackedFiles = no
a
